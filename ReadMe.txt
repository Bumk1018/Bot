06.28


07.05
도로 영상(이미지의 연속)을 트래킹하는 알고리즘 오픈소스(YOLOv8과 Deep SORT)를 이용하여 구성
파이썬 3.10 버전 사용

* YOLOv8
- 이미지에서 사람, 차량, 신호등 등 객체의 위치와 클래스(종류)를 탐지
- bounding box, confidence score, class id를 출력
- 시간 속도에 최적화

* Deep SORT
- YOLO로 탐지한 객체들을 시간 순으로 추적
- 각 객체에 고유한 ID를 부여하여, 같은 사람이 어디로 이동했는지 추적
- Kalman Filter + Hungarian 알고리즘 + ReID 사용

* 흐름
1. images/ 폴더의 연속 이미지를 한 장씩 불러옴
2. YOLOv8으로 각 이미지에서 객체(예: 사람, 차)를 탐지함
3. 탐지된 객체들을 Deep SORT로 트래킹함 (ID 유지)
4. 프레임 위에 박스와 ID를 시각화함
5. 최종 결과를 output.mp4로 저장


07.16
==============================
차량 속도 및 방향 트래킹 시스템
==============================

■ 개요
------------------------------
이 프로그램은 Google Drive에서 영상을 자동 다운로드하여,
차량(또는 객체)을 프레임 단위로 추적하고 속도(m/s) 및 이동 방향(각도)를 계산해
시각화된 결과 영상(result.mp4)으로 저장합니다.

YOLO나 딥러닝 모델 없이 OpenCV만으로 구현되었으며, 영상의 하단 75% 영역만을 분석하여
불필요한 객체(하늘, 건물 등) 탐지를 방지합니다.


■ 기능 요약
------------------------------
- Google Drive에서 영상 자동 다운로드 (gdown 사용)
- OpenCV 기반의 영상 처리 및 객체 탐지
- Centroid 기반 객체 트래킹 알고리즘 적용
- 프레임 간 위치 변화로 속도 및 방향 계산
- 프레임 하단 75% 영역만 ROI로 설정
- 추적 정보 시각화 (ID, 속도, 방향 표시)
- 결과 영상 저장: result.mp4


■ 사용 방법
------------------------------
1. Python 3.7 이상 설치
2. 이 파일과 같은 폴더에 tracker.py 저장
3. 명령어 실행:
   > python tracker.py
4. 실행 중 ESC 키를 누르면 종료됨
5. 결과는 result.mp4 로 저장됨


■ 다운로드 대상 Google Drive 링크
------------------------------
https://drive.google.com/file/d/11tWiihrFVCWOKkqg4_FqnicZZA_GRHkc/view

※ 공유 설정은 반드시 "링크가 있는 모든 사용자 보기 가능"이어야 합니다.


■ 주요 설정
------------------------------
- 영상 이름: output.mp4 (자동 다운로드)
- 결과 영상: result.mp4
- 픽셀-거리 변환값: 1픽셀 = 0.05m
- FPS (영상 초당 프레임 수): 30
- ROI: 프레임 하단 75%만 분석
- 객체 필터링: 면적 800~5000 범위만 유효


■ 의존 라이브러리 (자동 설치됨)
------------------------------
- opencv-python
- numpy
- gdown


■ 주의사항
------------------------------
- 차량 외에도 움직이는 물체(사람, 그림자 등)도 추적될 수 있음
- 영상의 픽셀 당 실제 거리(METER_PER_PIXEL)는 영상 조건에 따라 보정 필요
- 카메라 흔들림이 있는 영상에서는 정확도가 떨어질 수 있음


■ 확장 가능 사항
------------------------------
- YOLO 등 객체 분류기 연동 (차량만 필터링)
- CSV로 로그 저장
- 궤적 시각화 (트레일)
- 칼만 필터 기반 예측 기능 추가


■ 라이선스
------------------------------
본 코드는 학습 및 실습 목적의 공개 코드이며 자유롭게 수정 및 재배포 가능합니다.
상업적 사용 전에는 별도 문의 바랍니다.


07.26
Collision Prediction System using YOLO and Optical Flow

이 프로젝트는 블랙박스 영상에서 차량 객체를 탐지하고 추적하여 선형 경로 기반 충돌 예측을 수행하는 시스템입니다.
YOLOv8을 활용한 객체 탐지, Optical Flow를 이용한 카메라 보정, 상대 속도 기반 충돌 시간 계산을 포함합니다.

주요 기능

- 유튜브 블랙박스 영상 자동 다운로드
- YOLOv8 기반 차량 객체 탐지
- Optical Flow를 통한 카메라 움직임 보정
- 객체 추적 및 속도 계산
- 블랙박스 차량 기준 선형 경로 기반 충돌 시간 예측
- 운전자 반응 시간 고려한 위험 경고
- 충돌 위험 시 로그 파일 및 프레임 저장

프로젝트 파일 구조

collision_prediction.py    메인 실행 파일
collision_log.txt          충돌 예측 로그
collision_frames/          충돌 위험 프레임 이미지 저장 폴더
accident.mp4               다운로드된 유튜브 영상

실행 방법

1. Python 3.8 이상이 필요하며 인터넷 연결이 되어 있어야 합니다.
2. python collision_prediction.py 명령으로 실행합니다.
3. 최초 실행 시 yt-dlp, ultralytics, opencv-python, numpy 패키지가 자동으로 설치됩니다.

주요 설정

VIDEO_URL : 유튜브 블랙박스 영상 링크
FPS : 영상의 초당 프레임 수
METER_PER_PIXEL : 픽셀당 실제 거리 (미터)
COLLISION_THRESHOLD : 충돌로 간주할 시간 임계값 (초)
MIN_APPROACH_SPEED : 최소 상대 접근 속도 (미터 매 초)
MAX_COLLISION_DISTANCE : 충돌 감지 최대 거리 (미터)

충돌 판단 알고리즘 요약

1. 블랙박스 차량 (ID 0)을 기준으로 다른 차량들과의 거리 및 상대속도를 계산합니다.
2. 블랙박스 차량의 전방 90도 각도 안에 있는 차량만 대상으로 삼습니다.
3. 상대 속도가 일정 기준 이상이며, 충돌 예상 시간이 임계값보다 작으면 경고를 발생시킵니다.
4. 위험 프레임은 collision_frames 폴더에 저장되고, collision_log.txt에 기록됩니다.